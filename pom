#!/bin/bash

# Minimalistic time tracking and logging.
# Run with `-h` or `--help` to learn more.
# By John O Brickley.
# Derived from a script by @tobym (Toby Matejovsky).

################################
#        CONFIGURATION         #
################################
# Runtime of a single session.
time_in_minutes=25
# Logfile.
logfile=$HOME/.pom.log

task=$@

scriptlocation=$(echo ${0%/*}/pom)

# Try to sound chime.
function play_chime {
    afplay $scriptlocation/chime.m4a
}
# Print current status.
function print_status {
    clear
    minutes_remaining=$(($time_in_minutes - $1))
    echo "$minutes_remaining minutes remaining to: $task"
}

# Print final status.
function finish {
    clear
    msg="$time_in_minutes minutes of $task"
    echo $msg
    echo "$(date +"%Y-%m-%d  %H:%M")   $msg" >> $logfile
    ring_bell
    sound_chime
}

# Try to ring the terminal bell.
function ring_bell {
    which tput >/dev/null && tput bel
}

# Print short version of help.
function print_usage {
    echo "Usage: pom <task>"
}

# Print help.
function print_help {
    help_text='
    NAME
      pom -- a minimalist pomodoro-style time-tracker.

  SYNOPSIS
      pom <task>

  DESCRIPTION
      The pom utility counts down for 25 minutes as you work on a task.
      Logfile location is $HOME/.pom.log by default, but can be changed
      in the "CONFIGURATION" section at the top of the script source.
'

    echo "$help_text"
}

# Main function.
function run_main {
    for minute in `seq $time_in_minutes`
    do
        print_status $(($minute-1))
        sleep 60
    done
    finish
}

# Parse options and run main.
if [ "$1" = "-h" ] || [ "$1" = "--help" ]
then
    print_help && exit 0
elif [ -z "$1" ]
then
    print_usage && exit 1
else
    play_chime
    run_main
fi
