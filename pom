#!/bin/sh -e

# Minimalistic time tracking and logging.
# Run with `-h` or `--help` to learn more.
# By John O. Brickley.
# Derived from a script by @tobym (Toby Matejovsky).

################################
#        CONFIGURATION         #
################################

# Runtime of a single session.
pom_time=25
# Logfile.
pom_logfile=$HOME/.pom.log
# Check for config overrides.
if [[ -e $HOME/.pom.rc ]]; then
    source $HOME/.pom.rc
fi

# Set initial task, if any.
task=$@

# Set the command to be used for playing audio files.#{{{
function set_play_command {
    if command -v afplay &> /dev/null; then
        play_command="afplay"
    elif command -v mpg123 &> /dev/null; then
        play_command=mpg123 $chime_location
    fi
    return
}
#}}}

# Play a chime.#{{{
function play_chime {
    chime_location=$(echo ${0%/*}/pom/chime.mp3)
    $play_command $chime_location &
    return
}
#}}}

# Print current status.#{{{
function print_status {
    clear
    minutes_remaining=$(($pom_time - $1))
    echo "$minutes_remaining minutes remaining for: $task."
}
#}}}

# Print and log finished task.#{{{
function finish {
    clear
    msg="$pom_time minutes on $task."
    echo $msg
    echo "$(date +"%Y-%m-%d  %H:%M")   $pom_time  $task" >> $pom_logfile
    ring_bell
    play_chime
}
#}}}

# Try to ring the terminal bell.#{{{
function ring_bell {
    which tput >/dev/null && tput bel
}
#}}}

# Print short version of help.#{{{
function print_usage {
    echo "Usage: pom"
}
#}}}

# Print help.#{{{
function print_help {
    help_text='
    NAME
      pom -- a minimalistic pomodoro-style time-tracker.

  SYNOPSIS
      pom

  DESCRIPTION
      The pom utility counts down for 25 minutes as you
      work on a task.  Logfile location and pomodoro length
      can both be set by either editing the "CONFIGURATION"
      section at the top of this script, or by setting the
      "pom_logfile" and "pom_time" variables in ~/.pom.rc.
'
    echo "$help_text"
}
#}}}

# Main function.#{{{
function run_main {
    set_play_command
    for minute in `seq $pom_time`; do
        print_status $(($minute-1))
        sleep 60
    done
    finish
}
#}}}

# Take break.#{{{
function take_short_break {
    echo "Breath."
    for minute in `seq 5`; do
        if [ $minute == 5 ]; then
            echo "$((6-$minute)) break minute remaining."
        else
            echo "$((6-$minute)) break minutes remaining."
        fi
        sleep 60
    done
    ring_bell
    play_chime
}

function take_long_break {
    echo "Stretch."
    for minute in `seq 20`; do
        if [ $minute == 20 ]; then
            echo "$((21-$minute)) break minute remaining."
        else
            echo "$((21-$minute)) break minutes remaining."
        fi
        sleep 60
    done
    ring_bell
    play_chime
}
#}}}

# Parse options and run main.
if [ "$1" = "-h" ]; then
    print_usage && exit 0
elif [ "$1" = "--help" ]; then
    print_help && exit 0
else
    pom_count=1
    while [[ $pom_count < 5 ]]; do
        if [[ $pom_count > 1 ]] || [ -z $@ ]; then
            read -p "Enter task: " task
        fi
        run_main
        if [[ $pom_count < 4 ]]; then
            take_short_break
        else
            take_long_break
        fi
        pom_count=$(($pom_count+1))
    done
fi
